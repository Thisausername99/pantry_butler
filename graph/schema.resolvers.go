package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

// import (
// 	"context"
// 	"errors"
// 	"fmt"

// 	"github.com/thisausername99/recipes-api/models"
// )

// // UpsertEntry is the resolver for the upsertEntry field.
// func (r *mutationResolver) InsertEntry(ctx context.Context, entry models.PantryEntryInput) (*models.PantryEntry, error) {
// 	pantryEntry := &models.PantryEntry{}
// 	if entry.Name == "" {
// 		return nil, errors.New("entry does not have a name")
// 	}

// 	pantryEntry.Name = entry.Name

// 	if entry.Quantity != nil {
// 		pantryEntry.Quantity = entry.Quantity
// 	}

// 	if entry.Expiration != nil {
// 		pantryEntry.Expiration = entry.Expiration
// 	}

// 	return r.PantryEntryRepo.InsertPantryEntry(pantryEntry)
// }

// // QuantityType is the resolver for the quantityType field.
// func (r *pantryEntryResolver) QuantityType(ctx context.Context, obj *models.PantryEntry) (*string, error) {
// 	panic(fmt.Errorf("not implemented: QuantityType - quantityType"))
// }

// // Recipe is the resolver for the recipe field.
// func (r *queryResolver) Recipe(ctx context.Context) ([]*models.Recipe, error) {
// 	return r.RecipeRepo.GetRecipes()
// }

// // RecipeByCuisine is the resolver for the recipeByCuisine field.
// func (r *queryResolver) RecipeByCuisine(ctx context.Context, cuisine string) ([]*models.Recipe, error) {
// 	return r.RecipeRepo.GetRecipesByCuisine(cuisine)
// }

// // Mutation returns MutationResolver implementation.
// func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// // PantryEntry returns PantryEntryResolver implementation.
// func (r *Resolver) PantryEntry() PantryEntryResolver { return &pantryEntryResolver{r} }

// // Query returns QueryResolver implementation.
// func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// type mutationResolver struct{ *Resolver }
// type pantryEntryResolver struct{ *Resolver }
// type queryResolver struct{ *Resolver }

// // !!! WARNING !!!
// // The code below was going to be deleted when updating resolvers. It has been copied here so you have
// // one last chance to move it out of harms way if you want. There are two reasons this happens:
// //   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
// //     it when you're done.
// //   - You have helper methods in this file. Move them out to keep these resolver files clean.
// func (r *mutationResolver) InsertEntry(ctx context.Context, entry models.PantryEntryInput) (*models.PantryEntry, error) {
// 	pantryEntry := &models.PantryEntry{}
// 	if entry.Name == "" {
// 		return nil, errors.New("entry does not have a name")
// 	}

// 	pantryEntry.Name = entry.Name

// 	if entry.Quantity != nil {
// 		pantryEntry.Quantity = entry.Quantity
// 	}

// 	if entry.Expiration != nil {
// 		pantryEntry.Expiration = entry.Expiration
// 	}

// 	return r.PantryEntryRepo.InsertPantryEntry(pantryEntry)
// }
// func (r *queryResolver) Recipe(ctx context.Context) ([]*models.Recipe, error) {
// 	return r.RecipeRepo.GetRecipes()
// }
// func (r *queryResolver) RecipeByCuisine(ctx context.Context, cuisine string) ([]*models.Recipe, error) {
// 	return r.RecipeRepo.GetRecipesByCuisine(cuisine)
// }
// func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }
// func (r *Resolver) Query() QueryResolver       { return &queryResolver{r} }
