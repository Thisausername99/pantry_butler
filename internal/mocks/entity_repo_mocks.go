// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thisausername99/pantry_butler/internal/domain/repository (interfaces: PantryRepository,RecipeRepository,UserRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/thisausername99/pantry_butler/internal/domain/entity"
)

// MockPantryRepository is a mock of PantryRepository interface.
type MockPantryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPantryRepositoryMockRecorder
}

// MockPantryRepositoryMockRecorder is the mock recorder for MockPantryRepository.
type MockPantryRepositoryMockRecorder struct {
	mock *MockPantryRepository
}

// NewMockPantryRepository creates a new mock instance.
func NewMockPantryRepository(ctrl *gomock.Controller) *MockPantryRepository {
	mock := &MockPantryRepository{ctrl: ctrl}
	mock.recorder = &MockPantryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPantryRepository) EXPECT() *MockPantryRepositoryMockRecorder {
	return m.recorder
}

// CreateNewPantry mocks base method.
func (m *MockPantryRepository) CreateNewPantry(arg0 context.Context, arg1 *entity.Pantry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewPantry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewPantry indicates an expected call of CreateNewPantry.
func (mr *MockPantryRepositoryMockRecorder) CreateNewPantry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewPantry", reflect.TypeOf((*MockPantryRepository)(nil).CreateNewPantry), arg0, arg1)
}

// DeletePantry mocks base method.
func (m *MockPantryRepository) DeletePantry(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePantry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePantry indicates an expected call of DeletePantry.
func (mr *MockPantryRepositoryMockRecorder) DeletePantry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePantry", reflect.TypeOf((*MockPantryRepository)(nil).DeletePantry), arg0, arg1)
}

// DeletePantryEntry mocks base method.
func (m *MockPantryRepository) DeletePantryEntry(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePantryEntry", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePantryEntry indicates an expected call of DeletePantryEntry.
func (mr *MockPantryRepositoryMockRecorder) DeletePantryEntry(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePantryEntry", reflect.TypeOf((*MockPantryRepository)(nil).DeletePantryEntry), arg0, arg1, arg2)
}

// GetPantryEntries mocks base method.
func (m *MockPantryRepository) GetPantryEntries(arg0 context.Context, arg1 string) ([]entity.PantryEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPantryEntries", arg0, arg1)
	ret0, _ := ret[0].([]entity.PantryEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPantryEntries indicates an expected call of GetPantryEntries.
func (mr *MockPantryRepositoryMockRecorder) GetPantryEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPantryEntries", reflect.TypeOf((*MockPantryRepository)(nil).GetPantryEntries), arg0, arg1)
}

// InsertPantryEntry mocks base method.
func (m *MockPantryRepository) InsertPantryEntry(arg0 context.Context, arg1 string, arg2 *entity.PantryEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPantryEntry", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPantryEntry indicates an expected call of InsertPantryEntry.
func (mr *MockPantryRepositoryMockRecorder) InsertPantryEntry(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPantryEntry", reflect.TypeOf((*MockPantryRepository)(nil).InsertPantryEntry), arg0, arg1, arg2)
}

// MockRecipeRepository is a mock of RecipeRepository interface.
type MockRecipeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRecipeRepositoryMockRecorder
}

// MockRecipeRepositoryMockRecorder is the mock recorder for MockRecipeRepository.
type MockRecipeRepositoryMockRecorder struct {
	mock *MockRecipeRepository
}

// NewMockRecipeRepository creates a new mock instance.
func NewMockRecipeRepository(ctrl *gomock.Controller) *MockRecipeRepository {
	mock := &MockRecipeRepository{ctrl: ctrl}
	mock.recorder = &MockRecipeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipeRepository) EXPECT() *MockRecipeRepositoryMockRecorder {
	return m.recorder
}

// GetRecipes mocks base method.
func (m *MockRecipeRepository) GetRecipes(arg0 context.Context) ([]entity.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipes", arg0)
	ret0, _ := ret[0].([]entity.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipes indicates an expected call of GetRecipes.
func (mr *MockRecipeRepositoryMockRecorder) GetRecipes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipes", reflect.TypeOf((*MockRecipeRepository)(nil).GetRecipes), arg0)
}

// GetRecipesByCuisine mocks base method.
func (m *MockRecipeRepository) GetRecipesByCuisine(arg0 context.Context, arg1 string) ([]entity.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipesByCuisine", arg0, arg1)
	ret0, _ := ret[0].([]entity.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipesByCuisine indicates an expected call of GetRecipesByCuisine.
func (mr *MockRecipeRepositoryMockRecorder) GetRecipesByCuisine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipesByCuisine", reflect.TypeOf((*MockRecipeRepository)(nil).GetRecipesByCuisine), arg0, arg1)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(arg0 context.Context, arg1 *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), arg0, arg1)
}

// DeletePantryFromUser mocks base method.
func (m *MockUserRepository) DeletePantryFromUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePantryFromUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePantryFromUser indicates an expected call of DeletePantryFromUser.
func (mr *MockUserRepositoryMockRecorder) DeletePantryFromUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePantryFromUser", reflect.TypeOf((*MockUserRepository)(nil).DeletePantryFromUser), arg0, arg1, arg2)
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(arg0 context.Context, arg1 string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(arg0 context.Context, arg1 string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), arg0, arg1)
}

// UpdateUserWithPantry mocks base method.
func (m *MockUserRepository) UpdateUserWithPantry(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserWithPantry", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserWithPantry indicates an expected call of UpdateUserWithPantry.
func (mr *MockUserRepositoryMockRecorder) UpdateUserWithPantry(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWithPantry", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserWithPantry), arg0, arg1, arg2)
}
