// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thisausername99/pantry_butler/internal/persistence/mongo (interfaces: MongoDB,MongoDatabase,MongoCollection,MongoCursor,MongoSingleResult,MongoInsertOneResult,MongoInsertManyResult,MongoUpdateResult,MongoDeleteResult,MongoIndexView)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "github.com/thisausername99/pantry_butler/internal/persistence/mongo"
	mongo0 "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockMongoDB is a mock of MongoDB interface.
type MockMongoDB struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDBMockRecorder
}

// MockMongoDBMockRecorder is the mock recorder for MockMongoDB.
type MockMongoDBMockRecorder struct {
	mock *MockMongoDB
}

// NewMockMongoDB creates a new mock instance.
func NewMockMongoDB(ctrl *gomock.Controller) *MockMongoDB {
	mock := &MockMongoDB{ctrl: ctrl}
	mock.recorder = &MockMongoDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDB) EXPECT() *MockMongoDBMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockMongoDB) Connect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockMongoDBMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMongoDB)(nil).Connect), arg0)
}

// Database mocks base method.
func (m *MockMongoDB) Database(arg0 string) mongo.MongoDatabase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database", arg0)
	ret0, _ := ret[0].(mongo.MongoDatabase)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockMongoDBMockRecorder) Database(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockMongoDB)(nil).Database), arg0)
}

// Disconnect mocks base method.
func (m *MockMongoDB) Disconnect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockMongoDBMockRecorder) Disconnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMongoDB)(nil).Disconnect), arg0)
}

// Ping mocks base method.
func (m *MockMongoDB) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMongoDBMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMongoDB)(nil).Ping), arg0)
}

// MockMongoDatabase is a mock of MongoDatabase interface.
type MockMongoDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDatabaseMockRecorder
}

// MockMongoDatabaseMockRecorder is the mock recorder for MockMongoDatabase.
type MockMongoDatabaseMockRecorder struct {
	mock *MockMongoDatabase
}

// NewMockMongoDatabase creates a new mock instance.
func NewMockMongoDatabase(ctrl *gomock.Controller) *MockMongoDatabase {
	mock := &MockMongoDatabase{ctrl: ctrl}
	mock.recorder = &MockMongoDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDatabase) EXPECT() *MockMongoDatabaseMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockMongoDatabase) Collection(arg0 string) mongo.MongoCollection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", arg0)
	ret0, _ := ret[0].(mongo.MongoCollection)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockMongoDatabaseMockRecorder) Collection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockMongoDatabase)(nil).Collection), arg0)
}

// Drop mocks base method.
func (m *MockMongoDatabase) Drop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop.
func (mr *MockMongoDatabaseMockRecorder) Drop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockMongoDatabase)(nil).Drop), arg0)
}

// RunCommand mocks base method.
func (m *MockMongoDatabase) RunCommand(arg0 context.Context, arg1 interface{}) mongo.MongoSingleResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", arg0, arg1)
	ret0, _ := ret[0].(mongo.MongoSingleResult)
	return ret0
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockMongoDatabaseMockRecorder) RunCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockMongoDatabase)(nil).RunCommand), arg0, arg1)
}

// MockMongoCollection is a mock of MongoCollection interface.
type MockMongoCollection struct {
	ctrl     *gomock.Controller
	recorder *MockMongoCollectionMockRecorder
}

// MockMongoCollectionMockRecorder is the mock recorder for MockMongoCollection.
type MockMongoCollectionMockRecorder struct {
	mock *MockMongoCollection
}

// NewMockMongoCollection creates a new mock instance.
func NewMockMongoCollection(ctrl *gomock.Controller) *MockMongoCollection {
	mock := &MockMongoCollection{ctrl: ctrl}
	mock.recorder = &MockMongoCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoCollection) EXPECT() *MockMongoCollectionMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockMongoCollection) Aggregate(arg0 context.Context, arg1 interface{}) (mongo.MongoCursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", arg0, arg1)
	ret0, _ := ret[0].(mongo.MongoCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockMongoCollectionMockRecorder) Aggregate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockMongoCollection)(nil).Aggregate), arg0, arg1)
}

// CountDocuments mocks base method.
func (m *MockMongoCollection) CountDocuments(arg0 context.Context, arg1 interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDocuments", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDocuments indicates an expected call of CountDocuments.
func (mr *MockMongoCollectionMockRecorder) CountDocuments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDocuments", reflect.TypeOf((*MockMongoCollection)(nil).CountDocuments), arg0, arg1)
}

// DeleteMany mocks base method.
func (m *MockMongoCollection) DeleteMany(arg0 context.Context, arg1 interface{}) (mongo.MongoDeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", arg0, arg1)
	ret0, _ := ret[0].(mongo.MongoDeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockMongoCollectionMockRecorder) DeleteMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockMongoCollection)(nil).DeleteMany), arg0, arg1)
}

// DeleteOne mocks base method.
func (m *MockMongoCollection) DeleteOne(arg0 context.Context, arg1 interface{}) (mongo.MongoDeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", arg0, arg1)
	ret0, _ := ret[0].(mongo.MongoDeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockMongoCollectionMockRecorder) DeleteOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockMongoCollection)(nil).DeleteOne), arg0, arg1)
}

// Drop mocks base method.
func (m *MockMongoCollection) Drop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop.
func (mr *MockMongoCollectionMockRecorder) Drop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockMongoCollection)(nil).Drop), arg0)
}

// Find mocks base method.
func (m *MockMongoCollection) Find(arg0 context.Context, arg1 interface{}, arg2 ...*options.FindOptions) (mongo.MongoCursor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(mongo.MongoCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMongoCollectionMockRecorder) Find(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMongoCollection)(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockMongoCollection) FindOne(arg0 context.Context, arg1 interface{}) mongo.MongoSingleResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(mongo.MongoSingleResult)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockMongoCollectionMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockMongoCollection)(nil).FindOne), arg0, arg1)
}

// Indexes mocks base method.
func (m *MockMongoCollection) Indexes() mongo.MongoIndexView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Indexes")
	ret0, _ := ret[0].(mongo.MongoIndexView)
	return ret0
}

// Indexes indicates an expected call of Indexes.
func (mr *MockMongoCollectionMockRecorder) Indexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Indexes", reflect.TypeOf((*MockMongoCollection)(nil).Indexes))
}

// InsertMany mocks base method.
func (m *MockMongoCollection) InsertMany(arg0 context.Context, arg1 []interface{}) (mongo.MongoInsertManyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", arg0, arg1)
	ret0, _ := ret[0].(mongo.MongoInsertManyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockMongoCollectionMockRecorder) InsertMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockMongoCollection)(nil).InsertMany), arg0, arg1)
}

// InsertOne mocks base method.
func (m *MockMongoCollection) InsertOne(arg0 context.Context, arg1 interface{}) (mongo.MongoInsertOneResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1)
	ret0, _ := ret[0].(mongo.MongoInsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockMongoCollectionMockRecorder) InsertOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockMongoCollection)(nil).InsertOne), arg0, arg1)
}

// ReplaceOne mocks base method.
func (m *MockMongoCollection) ReplaceOne(arg0 context.Context, arg1, arg2 interface{}) (mongo.MongoUpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(mongo.MongoUpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceOne indicates an expected call of ReplaceOne.
func (mr *MockMongoCollectionMockRecorder) ReplaceOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceOne", reflect.TypeOf((*MockMongoCollection)(nil).ReplaceOne), arg0, arg1, arg2)
}

// UpdateMany mocks base method.
func (m *MockMongoCollection) UpdateMany(arg0 context.Context, arg1, arg2 interface{}) (mongo.MongoUpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", arg0, arg1, arg2)
	ret0, _ := ret[0].(mongo.MongoUpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockMongoCollectionMockRecorder) UpdateMany(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockMongoCollection)(nil).UpdateMany), arg0, arg1, arg2)
}

// UpdateOne mocks base method.
func (m *MockMongoCollection) UpdateOne(arg0 context.Context, arg1, arg2 interface{}) (mongo.MongoUpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(mongo.MongoUpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockMongoCollectionMockRecorder) UpdateOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockMongoCollection)(nil).UpdateOne), arg0, arg1, arg2)
}

// MockMongoCursor is a mock of MongoCursor interface.
type MockMongoCursor struct {
	ctrl     *gomock.Controller
	recorder *MockMongoCursorMockRecorder
}

// MockMongoCursorMockRecorder is the mock recorder for MockMongoCursor.
type MockMongoCursorMockRecorder struct {
	mock *MockMongoCursor
}

// NewMockMongoCursor creates a new mock instance.
func NewMockMongoCursor(ctrl *gomock.Controller) *MockMongoCursor {
	mock := &MockMongoCursor{ctrl: ctrl}
	mock.recorder = &MockMongoCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoCursor) EXPECT() *MockMongoCursorMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockMongoCursor) All(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockMongoCursorMockRecorder) All(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockMongoCursor)(nil).All), arg0, arg1)
}

// Close mocks base method.
func (m *MockMongoCursor) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMongoCursorMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMongoCursor)(nil).Close), arg0)
}

// Decode mocks base method.
func (m *MockMongoCursor) Decode(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockMongoCursorMockRecorder) Decode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockMongoCursor)(nil).Decode), arg0)
}

// Err mocks base method.
func (m *MockMongoCursor) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockMongoCursorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockMongoCursor)(nil).Err))
}

// Next mocks base method.
func (m *MockMongoCursor) Next(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockMongoCursorMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockMongoCursor)(nil).Next), arg0)
}

// MockMongoSingleResult is a mock of MongoSingleResult interface.
type MockMongoSingleResult struct {
	ctrl     *gomock.Controller
	recorder *MockMongoSingleResultMockRecorder
}

// MockMongoSingleResultMockRecorder is the mock recorder for MockMongoSingleResult.
type MockMongoSingleResultMockRecorder struct {
	mock *MockMongoSingleResult
}

// NewMockMongoSingleResult creates a new mock instance.
func NewMockMongoSingleResult(ctrl *gomock.Controller) *MockMongoSingleResult {
	mock := &MockMongoSingleResult{ctrl: ctrl}
	mock.recorder = &MockMongoSingleResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoSingleResult) EXPECT() *MockMongoSingleResultMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockMongoSingleResult) Decode(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockMongoSingleResultMockRecorder) Decode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockMongoSingleResult)(nil).Decode), arg0)
}

// Err mocks base method.
func (m *MockMongoSingleResult) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockMongoSingleResultMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockMongoSingleResult)(nil).Err))
}

// MockMongoInsertOneResult is a mock of MongoInsertOneResult interface.
type MockMongoInsertOneResult struct {
	ctrl     *gomock.Controller
	recorder *MockMongoInsertOneResultMockRecorder
}

// MockMongoInsertOneResultMockRecorder is the mock recorder for MockMongoInsertOneResult.
type MockMongoInsertOneResultMockRecorder struct {
	mock *MockMongoInsertOneResult
}

// NewMockMongoInsertOneResult creates a new mock instance.
func NewMockMongoInsertOneResult(ctrl *gomock.Controller) *MockMongoInsertOneResult {
	mock := &MockMongoInsertOneResult{ctrl: ctrl}
	mock.recorder = &MockMongoInsertOneResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoInsertOneResult) EXPECT() *MockMongoInsertOneResultMockRecorder {
	return m.recorder
}

// InsertedID mocks base method.
func (m *MockMongoInsertOneResult) InsertedID() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertedID")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// InsertedID indicates an expected call of InsertedID.
func (mr *MockMongoInsertOneResultMockRecorder) InsertedID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertedID", reflect.TypeOf((*MockMongoInsertOneResult)(nil).InsertedID))
}

// MockMongoInsertManyResult is a mock of MongoInsertManyResult interface.
type MockMongoInsertManyResult struct {
	ctrl     *gomock.Controller
	recorder *MockMongoInsertManyResultMockRecorder
}

// MockMongoInsertManyResultMockRecorder is the mock recorder for MockMongoInsertManyResult.
type MockMongoInsertManyResultMockRecorder struct {
	mock *MockMongoInsertManyResult
}

// NewMockMongoInsertManyResult creates a new mock instance.
func NewMockMongoInsertManyResult(ctrl *gomock.Controller) *MockMongoInsertManyResult {
	mock := &MockMongoInsertManyResult{ctrl: ctrl}
	mock.recorder = &MockMongoInsertManyResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoInsertManyResult) EXPECT() *MockMongoInsertManyResultMockRecorder {
	return m.recorder
}

// InsertedIDs mocks base method.
func (m *MockMongoInsertManyResult) InsertedIDs() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertedIDs")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// InsertedIDs indicates an expected call of InsertedIDs.
func (mr *MockMongoInsertManyResultMockRecorder) InsertedIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertedIDs", reflect.TypeOf((*MockMongoInsertManyResult)(nil).InsertedIDs))
}

// MockMongoUpdateResult is a mock of MongoUpdateResult interface.
type MockMongoUpdateResult struct {
	ctrl     *gomock.Controller
	recorder *MockMongoUpdateResultMockRecorder
}

// MockMongoUpdateResultMockRecorder is the mock recorder for MockMongoUpdateResult.
type MockMongoUpdateResultMockRecorder struct {
	mock *MockMongoUpdateResult
}

// NewMockMongoUpdateResult creates a new mock instance.
func NewMockMongoUpdateResult(ctrl *gomock.Controller) *MockMongoUpdateResult {
	mock := &MockMongoUpdateResult{ctrl: ctrl}
	mock.recorder = &MockMongoUpdateResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoUpdateResult) EXPECT() *MockMongoUpdateResultMockRecorder {
	return m.recorder
}

// MatchedCount mocks base method.
func (m *MockMongoUpdateResult) MatchedCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchedCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MatchedCount indicates an expected call of MatchedCount.
func (mr *MockMongoUpdateResultMockRecorder) MatchedCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchedCount", reflect.TypeOf((*MockMongoUpdateResult)(nil).MatchedCount))
}

// ModifiedCount mocks base method.
func (m *MockMongoUpdateResult) ModifiedCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifiedCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ModifiedCount indicates an expected call of ModifiedCount.
func (mr *MockMongoUpdateResultMockRecorder) ModifiedCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifiedCount", reflect.TypeOf((*MockMongoUpdateResult)(nil).ModifiedCount))
}

// UpsertedCount mocks base method.
func (m *MockMongoUpdateResult) UpsertedCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertedCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// UpsertedCount indicates an expected call of UpsertedCount.
func (mr *MockMongoUpdateResultMockRecorder) UpsertedCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertedCount", reflect.TypeOf((*MockMongoUpdateResult)(nil).UpsertedCount))
}

// UpsertedID mocks base method.
func (m *MockMongoUpdateResult) UpsertedID() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertedID")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// UpsertedID indicates an expected call of UpsertedID.
func (mr *MockMongoUpdateResultMockRecorder) UpsertedID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertedID", reflect.TypeOf((*MockMongoUpdateResult)(nil).UpsertedID))
}

// MockMongoDeleteResult is a mock of MongoDeleteResult interface.
type MockMongoDeleteResult struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDeleteResultMockRecorder
}

// MockMongoDeleteResultMockRecorder is the mock recorder for MockMongoDeleteResult.
type MockMongoDeleteResultMockRecorder struct {
	mock *MockMongoDeleteResult
}

// NewMockMongoDeleteResult creates a new mock instance.
func NewMockMongoDeleteResult(ctrl *gomock.Controller) *MockMongoDeleteResult {
	mock := &MockMongoDeleteResult{ctrl: ctrl}
	mock.recorder = &MockMongoDeleteResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDeleteResult) EXPECT() *MockMongoDeleteResultMockRecorder {
	return m.recorder
}

// DeletedCount mocks base method.
func (m *MockMongoDeleteResult) DeletedCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletedCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// DeletedCount indicates an expected call of DeletedCount.
func (mr *MockMongoDeleteResultMockRecorder) DeletedCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletedCount", reflect.TypeOf((*MockMongoDeleteResult)(nil).DeletedCount))
}

// MockMongoIndexView is a mock of MongoIndexView interface.
type MockMongoIndexView struct {
	ctrl     *gomock.Controller
	recorder *MockMongoIndexViewMockRecorder
}

// MockMongoIndexViewMockRecorder is the mock recorder for MockMongoIndexView.
type MockMongoIndexViewMockRecorder struct {
	mock *MockMongoIndexView
}

// NewMockMongoIndexView creates a new mock instance.
func NewMockMongoIndexView(ctrl *gomock.Controller) *MockMongoIndexView {
	mock := &MockMongoIndexView{ctrl: ctrl}
	mock.recorder = &MockMongoIndexViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoIndexView) EXPECT() *MockMongoIndexViewMockRecorder {
	return m.recorder
}

// CreateMany mocks base method.
func (m *MockMongoIndexView) CreateMany(arg0 context.Context, arg1 []mongo0.IndexModel) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockMongoIndexViewMockRecorder) CreateMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockMongoIndexView)(nil).CreateMany), arg0, arg1)
}

// CreateOne mocks base method.
func (m *MockMongoIndexView) CreateOne(arg0 context.Context, arg1 mongo0.IndexModel) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockMongoIndexViewMockRecorder) CreateOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockMongoIndexView)(nil).CreateOne), arg0, arg1)
}

// DropOne mocks base method.
func (m *MockMongoIndexView) DropOne(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropOne", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropOne indicates an expected call of DropOne.
func (mr *MockMongoIndexViewMockRecorder) DropOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropOne", reflect.TypeOf((*MockMongoIndexView)(nil).DropOne), arg0, arg1)
}

// List mocks base method.
func (m *MockMongoIndexView) List(arg0 context.Context) (mongo.MongoCursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(mongo.MongoCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMongoIndexViewMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMongoIndexView)(nil).List), arg0)
}
