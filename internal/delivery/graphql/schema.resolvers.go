package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/thisausername99/pantry_butler/internal/domain/entity"
)

// InsertEntry is the resolver for the insertEntry field.
func (r *mutationResolver) InsertEntry(ctx context.Context, pantryID string, entryInput entity.PantryEntryInput) (bool, error) {
	err := r.UseCase.RepoWrapper.PantryRepo.InsertPantryEntry(ctx, pantryID, &entryInput)
	return err == nil, err
}

// GetRecipe is the resolver for the getRecipe field.
func (r *queryResolver) GetRecipes(ctx context.Context) ([]*entity.Recipe, error) {
	return r.UseCase.RepoWrapper.RecipeRepo.GetRecipes(ctx)
}

// GetRecipesByCuisine is the resolver for the getRecipesByCuisine field.
func (r *queryResolver) GetRecipesByCuisine(ctx context.Context, cuisine string) ([]*entity.Recipe, error) {
	return r.UseCase.RepoWrapper.RecipeRepo.GetRecipesByCuisine(ctx, cuisine)
}

// GenerateRecipesFromPantry is the resolver for the generateRecipesFromPantry field.
func (r *queryResolver) GenerateRecipesFromPantry(ctx context.Context, userID string, pantryID string) ([]*entity.Recipe, error) {
	panic(fmt.Errorf("not implemented: GenerateRecipesFromPantry - generateRecipesFromPantry"))
}

// GetUserPantryByID is the resolver for the getUserPantryById field.
func (r *queryResolver) GetUserPantryByID(ctx context.Context, pantryID string) ([]*entity.PantryEntry, error) {
	return r.UseCase.RepoWrapper.PantryRepo.GetPantryEntries(ctx, pantryID)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
