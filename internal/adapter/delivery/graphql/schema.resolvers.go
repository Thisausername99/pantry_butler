package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"errors"

	entity "github.com/thisausername99/pantry-butler/internal/domain"
)

// UpsertEntry is the resolver for the upsertEntry field.
func (r *mutationResolver) InsertEntry(ctx context.Context, entry entity.PantryEntryInput) (*entity.PantryEntry, error) {
	pantryEntry := &entity.PantryEntry{}
	if entry.Name == "" {
		return nil, errors.New("entry does not have a name")
	}

	pantryEntry.Name = entry.Name

	if entry.Quantity != nil {
		pantryEntry.Quantity = entry.Quantity
	}

	if entry.Expiration != nil {
		pantryEntry.Expiration = entry.Expiration
	}

	return r.PantryEntryRepo.InsertPantryEntry(pantryEntry)
}

// Recipe is the resolver for the recipe field.
func (r *queryResolver) Recipe(ctx context.Context) ([]*entity.Recipe, error) {
	return r.RecipeRepo.GetRecipes()
}

// RecipeByCuisine is the resolver for the recipeByCuisine field.
func (r *queryResolver) RecipeByCuisine(ctx context.Context, cuisine string) ([]*entity.Recipe, error) {
	return r.RecipeRepo.GetRecipesByCuisine(cuisine)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
