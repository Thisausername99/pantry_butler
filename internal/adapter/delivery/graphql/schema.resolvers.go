package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	entity "github.com/thisausername99/pantry-butler/internal/domain"
)

// UpsertEntry is the resolver for the upsertEntry field.
func (r *mutationResolver) InsertEntry(ctx context.Context, entry entity.PantryEntryInput) (*entity.PantryEntry, error) {
	return r.UseCase.RepoWrapper.PantryEntryRepo.InsertPantryEntry(ctx, &entry)
}

// GetRecipe is the resolver for the getRecipe field.
func (r *queryResolver) GetRecipe(ctx context.Context) ([]*entity.Recipe, error) {
	return r.UseCase.RepoWrapper.RecipeRepo.GetRecipes(ctx)
}

// GetRecipeByCuisine is the resolver for the getRecipeByCuisine field.
func (r *queryResolver) GetRecipeByCuisine(ctx context.Context, cuisine string) ([]*entity.Recipe, error) {
	panic(fmt.Errorf("not implemented: GetRecipeByCuisine - getRecipeByCuisine"))
}

// MatchingRecipes is the resolver for the matchingRecipes field.
func (r *queryResolver) MatchingRecipes(ctx context.Context) ([]*entity.Recipe, error) {
	return r.UseCase.FindMatchingRecipes(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
